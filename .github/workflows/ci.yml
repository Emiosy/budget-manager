name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  tests:
    name: Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.1']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
        coverage: none
        
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-
          
    - name: Create .env file
      run: |
        cp .env.example .env || true
        echo "APP_ENV=test" >> .env
        echo "APP_SECRET=test-secret-key-for-ci" >> .env
        echo "DATABASE_URL=sqlite:///%kernel.project_dir%/var/data_test.db" >> .env
        echo "JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem" >> .env
        echo "JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem" >> .env
        echo "JWT_PASSPHRASE=test123" >> .env
        
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --no-interaction
      
    - name: Create directories and test database
      run: |
        mkdir -p var config/jwt
        touch var/data_test.db
        chmod 664 var/data_test.db
        
    - name: Generate JWT keys
      run: php bin/console lexik:jwt:generate-keypair --skip-if-exists
      
    - name: Setup database
      run: |
        # SQLite creates database automatically, just run migrations
        php bin/console doctrine:migrations:migrate --no-interaction --env=test
        # Load fixtures for testing
        php bin/console doctrine:fixtures:load --no-interaction --env=test
        
    - name: Run PHPUnit tests
      run: php vendor/bin/phpunit --no-coverage --display-deprecations
      
    - name: Check code style (if PHP CS Fixer is available)
      run: |
        if [ -f vendor/bin/php-cs-fixer ]; then
          vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
        else
          echo "PHP CS Fixer not installed, skipping code style check"
        fi
      continue-on-error: true
      
    - name: Static analysis (if PHPStan is available)
      run: |
        if [ -f vendor/bin/phpstan ]; then
          vendor/bin/phpstan analyse src --level=1
        else
          echo "PHPStan not installed, skipping static analysis"
        fi
      continue-on-error: true

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Create .env file
      run: |
        cp .env.example .env || true
        echo "APP_ENV=prod" >> .env
        echo "APP_SECRET=e2e-test-secret-key" >> .env
        echo "DATABASE_URL=sqlite:///%kernel.project_dir%/var/data_e2e.db" >> .env
        echo "JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem" >> .env
        echo "JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem" >> .env
        echo "JWT_PASSPHRASE=e2e123" >> .env
        
    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
      
    - name: Install npm dependencies
      run: npm ci
      
    - name: Build assets
      run: npm run build
      
    - name: Create directories and database
      run: |
        mkdir -p var config/jwt
        touch var/data_e2e.db
        chmod 664 var/data_e2e.db
        
    - name: Generate JWT keys
      run: php bin/console lexik:jwt:generate-keypair --skip-if-exists
      
    - name: Setup database
      run: |
        php bin/console doctrine:migrations:migrate --no-interaction --env=prod
        
    - name: Install Playwright browsers
      run: npx playwright install chromium
      
    - name: Run Playwright E2E tests
      run: npm run test:e2e:ci
      
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: |
          playwright-report/
          test-results/
        if-no-files-found: warn
        retention-days: 30

  build-and-deploy:
    name: Build Assets
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install npm dependencies
      run: npm ci
      
    - name: Build assets
      run: npm run build

  security:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        
    - name: Create .env file
      run: |
        cp .env.example .env || true
        echo "APP_ENV=prod" >> .env
        echo "APP_SECRET=security-check-secret" >> .env
        
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
      
    - name: Security check (if security-checker is available)
      run: |
        if [ -f vendor/bin/security-checker ]; then
          vendor/bin/security-checker security:check composer.lock
        else
          echo "Security checker not installed, using composer audit"
          composer audit --format=plain
        fi
      continue-on-error: false